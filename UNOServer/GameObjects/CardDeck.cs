///////////////////////////////////////////////////////////
//  CardDeck.cs
//  Implementation of the Class CardDeck
//  Generated by Enterprise Architect
//  Created on:      16-дек-2020 9:54:47
//  Original author: local-adm-sabitovka
///////////////////////////////////////////////////////////



using System;
using System.Collections.Generic;
using System.Linq;

namespace UNOServer.GameObjects {
	/// <summary>
	/// Колода карт
	/// </summary>
	public class CardDeck {

		public List<Card> Cards { get; set; } 

		public CardDeck() {
			Cards = new List<Card>();

            foreach (CardColor color in Enum.GetValues(typeof(CardColor))) {
                if (color != CardColor.Wild) {
                    foreach (CardValue val in Enum.GetValues(typeof(CardValue))) {
                        switch (val) {
                            case CardValue.One:
                            case CardValue.Two:
                            case CardValue.Three:
                            case CardValue.Four:
                            case CardValue.Five:
                            case CardValue.Six:
                            case CardValue.Seven:
                            case CardValue.Eight:
                            case CardValue.Nine:
                            case CardValue.Skip:
                            case CardValue.Reverse:
                            case CardValue.DrawTwo:
                                Cards.Add(new Card() {
                                    Color = color,
                                    Value = val
                                });
                                Cards.Add(new Card() {
                                    Color = color,
                                    Value = val
                                });
                                break;

                            case CardValue.Zero:
                                Cards.Add(new Card() {
                                    Color = color,
                                    Value = val
                                });
                                break;
                        }
                    }
                } else {
                    for (int i = 1; i <= 4; i++) {
                        Cards.Add(new Card() {
                            Color = color,
                            Value = CardValue.Wild
                        });
                    }
                    for (int i = 1; i <= 4; i++) {
                        Cards.Add(new Card() {
                            Color = color,
                            Value = CardValue.DrawFour
                        });
                    }
                }
            }
        }

		/// 
		/// <param name="cards"></param>
		public CardDeck(List<Card> cards) {
			Cards = cards;
		}

		/// 
		/// <param name="count"></param>
		public List<Card> Draw(int count) {
            var drawnCards = Cards.Take(count).ToList();
            Cards.RemoveAll(card => drawnCards.Contains(card));
			return drawnCards;
		}

		/// <summary>
		/// Перетасовует колоду карт
		/// </summary>
		public void Shuffle() {
            var random = new Random();
            List<Card> cards = Cards;

            for (int i = cards.Count - 1; i >= 0; i--) {
                int k = random.Next(i + 1);
                Card tmp = cards[i];
                cards[i] = cards[k];
                cards[k] = tmp;
            }
		}

	}//end CardDeck

}